[{"/home/audace/Documents/projects/recipe/src/App.tsx":"1","/home/audace/Documents/projects/recipe/src/constants/index.ts":"2","/home/audace/Documents/projects/recipe/src/components/RecipeModal.tsx":"3","/home/audace/Documents/projects/recipe/src/components/RecipeList.tsx":"4","/home/audace/Documents/projects/recipe/src/components/MainHeader.tsx":"5","/home/audace/Documents/projects/recipe/src/components/RecipeBody.tsx":"6","/home/audace/Documents/projects/recipe/src/reportWebVitals.ts":"7","/home/audace/Documents/projects/recipe/src/components/NotFound.tsx":"8"},{"size":4733,"mtime":1606478837385,"results":"9","hashOfConfig":"10"},{"size":941,"mtime":1606476493785,"results":"11","hashOfConfig":"10"},{"size":2161,"mtime":1606424336328,"results":"12","hashOfConfig":"10"},{"size":662,"mtime":1606478525837,"results":"13","hashOfConfig":"10"},{"size":299,"mtime":1606396836849,"results":"14","hashOfConfig":"10"},{"size":1672,"mtime":1606430717775,"results":"15","hashOfConfig":"10"},{"size":425,"mtime":1606220985675,"results":"16","hashOfConfig":"10"},{"size":1104,"mtime":1606477550845,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1mk60s6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/audace/Documents/projects/recipe/src/App.tsx",["37"],"import React, { useState, useEffect } from \"react\";\nimport { Row, Image } from \"antd\";\nimport \"./App.scss\";\nimport { VALUES, RECIPES_USERNAME } from \"./constants\";\nimport { Recipe } from \"./types\";\nimport MainHeader from \"./components/MainHeader\";\nimport RecipeList from \"./components/RecipeList\";\nimport RecipeBody from \"./components/RecipeBody\";\nimport RecipeModal from \"./components/RecipeModal\";\nimport UserSvg from \"./assets/user.svg\";\nimport NotFound from \"./components/NotFound\";\n\nfunction App() {\n  const [open, setOpen] = useState<boolean>(false);\n  const [edit, setEdit] = useState<boolean>(false);\n  const [isDeleted, setIsDeleted] = useState<boolean>(false);\n  const [recipes, setRecipes] = useState<Recipe[] | null>(null);\n  const [selected, setSelected] = useState<Recipe | null>(null);\n  const [form, setform] = useState<Recipe>({ id: \"\", name: \"\", ingredients: [\"\"], direction: [\"\"] });\n\n  useEffect(() => {\n    localStorage.setItem(RECIPES_USERNAME, localStorage.getItem(RECIPES_USERNAME) || JSON.stringify(VALUES));\n    const data = localStorage.getItem(RECIPES_USERNAME);\n    data && setRecipes(JSON.parse(data));\n    !selected && data && setSelected(JSON.parse(data)[0]);\n  }, [selected]);\n\n  const handleOk = (): void => {};\n  const onchange = (ev: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (ev.target.name === \"name\") setform({ ...form, name: ev.target.value });\n    if (ev.target.name === \"ingredients\") setform({ ...form, ingredients: ev.target.value.split(\"\\\\\") });\n    if (ev.target.name === \"direction\") setform({ ...form, direction: ev.target.value.split(\"\\\\\") });\n  };\n\n  const onSubmitHandler = (ev: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    ev.preventDefault();\n    const data = recipes;\n    if (data) {\n      data.push(Object.assign({ ...form }, { id: data && data.length + 1 }));\n      localStorage.setItem(RECIPES_USERNAME, JSON.stringify(data));\n      setform({ id: \"\", name: \"\", ingredients: [\"\"], direction: [\"\"] });\n      setSelected(Object.assign({ ...form }, { id: data &&data[ data.length + 1 }));\n    } else {\n      const info = [];\n      info.push(Object.assign({ ...form, id: 1 }));\n      localStorage.setItem(RECIPES_USERNAME, JSON.stringify(info));\n      const datas = localStorage.getItem(RECIPES_USERNAME);\n      datas && setRecipes(JSON.parse(datas));\n      datas && setSelected(JSON.parse(datas)[0]);\n      setform({ id: \"\", name: \"\", ingredients: [\"\"], direction: [\"\"] });\n    }\n    setOpen(false);\n    setIsDeleted(false);\n  };\n\n  const onUpdateHandler = (ev: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    ev.preventDefault();\n    recipes?.forEach((value, index) => {\n      if (value.id === selected?.id) {\n        recipes[index].name = form.name;\n        recipes[index].ingredients = form.ingredients;\n        recipes[index].direction = form.direction;\n      }\n    });\n    localStorage.setItem(RECIPES_USERNAME, JSON.stringify(recipes));\n    setSelected(form);\n    setform({ id: \"\", name: \"\", ingredients: [\"\"], direction: [\"\"] });\n    setOpen(false);\n    setIsDeleted(false);\n  };\n\n  const onDeleteHandler = (ev: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    ev.preventDefault();\n    recipes?.forEach((value, index) => {\n      if (value.id === selected?.id) {\n        delete recipes[index];\n      }\n    });\n    const data = recipes?.filter((value) => value != null);\n    localStorage.setItem(RECIPES_USERNAME, JSON.stringify(data));\n    setSelected(null);\n    setform({ id: \"\", name: \"\", ingredients: [\"\"], direction: [\"\"] });\n    setEdit(false);\n    setOpen(false);\n    setIsDeleted(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <MainHeader />\n      {!recipes ? (\n        <NotFound open={open} setOpen={setOpen} setEdit={setEdit} setIsDeleted={setIsDeleted} />\n      ) : (\n        <Row>\n          <RecipeList recipes={recipes} selected={selected} setSelected={setSelected} />\n          <RecipeBody\n            selected={selected}\n            setOpen={setOpen}\n            open={open}\n            setEdit={setEdit}\n            setForm={setform}\n            setIsDeleted={setIsDeleted}\n          />\n        </Row>\n      )}\n      <RecipeModal\n        open={open}\n        setOpen={setOpen}\n        form={form}\n        setform={setform}\n        onchange={onchange}\n        handleOk={handleOk}\n        edit={edit}\n        setEdit={setEdit}\n        isDeleted={isDeleted}\n        setIsDeleted={setIsDeleted}\n        selected={selected}\n        onSubmitHandler={onSubmitHandler}\n        onUpdateHandler={onUpdateHandler}\n        onDeleteHandler={onDeleteHandler}\n      />\n      <div>\n        <Image className=\"user-svg\" src={UserSvg} width={200} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/audace/Documents/projects/recipe/src/constants/index.ts",[],["38","39"],"/home/audace/Documents/projects/recipe/src/components/RecipeModal.tsx",[],["40","41"],"/home/audace/Documents/projects/recipe/src/components/RecipeList.tsx",[],"/home/audace/Documents/projects/recipe/src/components/MainHeader.tsx",[],"/home/audace/Documents/projects/recipe/src/components/RecipeBody.tsx",[],"/home/audace/Documents/projects/recipe/src/reportWebVitals.ts",[],"/home/audace/Documents/projects/recipe/src/components/NotFound.tsx",[],{"ruleId":null,"fatal":true,"severity":2,"message":"42","line":42,"column":80},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"43","replacedBy":"47"},{"ruleId":"45","replacedBy":"48"},"Parsing error: ']' expected.","no-native-reassign",["49"],"no-negated-in-lhs",["50"],["49"],["50"],"no-global-assign","no-unsafe-negation"]